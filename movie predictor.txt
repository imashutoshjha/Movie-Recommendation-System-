import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.impute import SimpleImputer

def get_title_from_index(index):
	return df[df.index == index]["title"].values[0]

def get_index_from_title(title):
	return df[df.title == title]["index"].values[0]

##Step 1: Read CSV File
X=pd.read_csv('movie_dataset.csv')

##Step 2: Select Features
# features=['keywords','cast','genres','director']
# imputer=SimpleImputer(strategy='constant',fill_value=" ")
# imputer=imputer.fit(X)
# X=imputer.transform(X)
X.fillna(" ", inplace=True)

##clean the columns that is in features otherwise you wont add the features to string


#Step 3: Create a column in DF which combines all selected features and returns a string
def combine_features(row):
  return row["keywords"]+" "+row["cast"]+" "+row["genres"]+" "+row["director"]

X["combined_features"]=X.apply(combine_features,axis=1)
X["combined_features"].head(n=5)

## we collected all the features,made a string for each row and put in the new column of our dataset 'combined_features'

##Step 4: Create count matrix from this new combined column
cv=CountVectorizer()
count_matrix=cv.fit_transform(X["combined_features"])
##Step 5: Compute the Cosine Similarity based on the count_matrix
cosine_sim=cosine_similarity(count_matrix)
movie_user_likes = "Men in Black"

## Step 6: Get index of this movie from its title
movie_index=get_index_from_title(movie_user_likes)
similar_movies=list(enumerate(cosine_sim[movie_index]))
## Step 7: Get a list of similar movies in descending order of similarity score
sorted_similar_movies=sorted(similar_movies,key=lambda x:x[1],reverse=True)


## Step 8: Print titles of first 50 movies
i=0;
for movie in sorted_similar_movies:
  print(get_title_from_index(movie[0]))
  i=i+1;
  if(i>50):
     break
